"""
Django settings for cobranzas_project project.
Generated by 'django-admin startproject' using Django 5.2.
"""

from pathlib import Path
import os  # variables de entorno

# ---------------------------------------------------------------------
# Paths
# ---------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# ---------------------------------------------------------------------
# Seguridad
# ---------------------------------------------------------------------
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "django-insecure-replace-me")
DEBUG = os.getenv("DJANGO_DEBUG", "True") == "True"

# Detectar si estamos en GitHub Codespaces
IS_CODESPACES = bool(os.getenv("CODESPACES") or os.getenv("GITHUB_CODESPACES"))
CODESPACE_NAME = os.getenv("CODESPACE_NAME")

# Hosts permitidos (incluye IPs locales, Codespaces y Cloudflare Tunnel + dominio estable)
ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "192.168.50.66",   # IP local (tu máquina)
    "172.25.48.1",     # IP virtual/VPN si aplica
    "190.2.6.169",     # tu IP pública (si aplica)
    ".app.github.dev", # subdominios públicos de Codespaces
    ".trycloudflare.com",  # subdominios efímeros del túnel de Cloudflare
    "app.promecorcobranzas.com",  # dominio estable via Named Tunnel
]
if CODESPACE_NAME:
    ALLOWED_HOSTS.append(f"{CODESPACE_NAME}.app.github.dev")

# CSRF detrás de proxy (Codespaces y Cloudflare Tunnel + dominio estable)
CSRF_TRUSTED_ORIGINS = [
    "https://*.app.github.dev",
    "https://*.trycloudflare.com",
    "https://app.promecorcobranzas.com",
]

# Respetar HTTPS cuando el proxy (Cloudflare/Codespaces) envía X-Forwarded-Proto
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# ---------------------------------------------------------------------
# Apps instaladas
# ---------------------------------------------------------------------
INSTALLED_APPS = [
    # Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Proyecto
    "core",
    "gestion_cobranzas",
    "art",

    # Utilidades
    "django.contrib.humanize",
    "django_celery_results",
]

# ---------------------------------------------------------------------
# Middleware
# ---------------------------------------------------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ---------------------------------------------------------------------
# URLs / WSGI
# ---------------------------------------------------------------------
ROOT_URLCONF = "cobranzas_project.urls"
WSGI_APPLICATION = "cobranzas_project.wsgi.application"

# ---------------------------------------------------------------------
# Templates
# ---------------------------------------------------------------------
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "core" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# ---------------------------------------------------------------------
# Base de datos
#  - Local: PostgreSQL (como tenías)
#  - Codespaces: SQLite (para demo sin depender de Postgres)
# ---------------------------------------------------------------------
if IS_CODESPACES:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("DB_NAME", "cobranzas_db"),
            "USER": os.getenv("DB_USER", "postgres"),
            "PASSWORD": os.getenv("DB_PASSWORD", ""),
            "HOST": os.getenv("DB_HOST", "localhost"),
            "PORT": os.getenv("DB_PORT", "5432"),
        }
    }

# ---------------------------------------------------------------------
# Password validators
# ---------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ---------------------------------------------------------------------
# Internacionalización / formato AR
# ---------------------------------------------------------------------
LANGUAGE_CODE = "es-ar"
TIME_ZONE = "America/Argentina/Buenos_Aires"
USE_I18N = True
USE_TZ = True
USE_THOUSAND_SEPARATOR = True
DECIMAL_SEPARATOR = ","
THOUSAND_SEPARATOR = "."

# ---------------------------------------------------------------------
# Archivos estáticos
# ---------------------------------------------------------------------
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = []

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ---------------------------------------------------------------------
# Config específica del proyecto (ART)
# ---------------------------------------------------------------------
ART_ASEG_DIR = Path(r"C:/Users/Promecor/Documents/ART/Aseguradoras")
ART_MAESTRO_PATH = Path(
    r"C:/Users/Promecor/Documents/Aplicativo cobranzas/ART/TOTAL PARA SUBIR DEUDAS ART.xlsx"
)

# ---------------------------------------------------------------------
# Celery / Redis
# ---------------------------------------------------------------------
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://127.0.0.1:6379/0")
CELERY_RESULT_BACKEND = "django-db"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

# ---------------------------------------------------------------------
# Email (SMTP Gmail via App Password)
# ---------------------------------------------------------------------
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# ---------------------------------------------------------------------
# Login / Logout
# ---------------------------------------------------------------------
LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/dashboard/"
LOGOUT_REDIRECT_URL = "/accounts/login/"
